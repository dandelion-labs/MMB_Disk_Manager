' Gambas class file

'Following notes from: http://sweh.spuddy.org/Beeb/mmb_utils.html

'== == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == =
'Disk format
'== == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == =
'MMB consists Of 32 sectors(8 Kb) Of data, split into 16 byte blocks.
'The first block Of 8 chars Is Is In the format
' aa bb cc dd AA BB CC DD
'where AAaa BBbb CCcc DDdd are the images inserted at boot time.Default
'Is 00 01 02 03 00 00 00 00
'"*ONBOOT 3 500" would make dd = F4 DD = 01(&01F4 = 500)

'The Next 8 bytes(completing the 16 byte block)are unused And are
'typically all zero.

'After that comes 511 blocks which consist Of
'  DISKNAME(12 chars)
'  unused(3 chars)
'  STATUS(1 char)0 == > locked(readonly); 15 = > Readwrite; 240 = > Unformatted
'                 255 = > invalid

'In theory the DISKNAME should Match the disk TITLE In Each place, but it
'can get out Of sync. * RECAT On the MMC Utils ROM reads the title From
'Each SSD And updates this name.

'Then Each SSD Is A chunk Of 200 Kb data following.So disk 'n' starts
'at 'n'*204800+8192.  That's all there is to an MMB.

'An SSD Is A simple 200 K(80 track 10 sector)image.Since it 's literally
'an image it follows the standard Acorn DFS layout.
'This just cover the details for the disk title

'Sector 0 Is Split into 32 * 8 byte records.Record 0 Is The first 8
'characters Of the disk title.Records 1 - > 31 have filename(7 chars)
'And directory(1 char).If the high bit Of the directory Is Set Then
'the file Is Locked.

'Sector 1 Is Similarly split into 32 * 8 bytes but a lot more complicated.
'Bytes 0 - > 3 are the Last 4 characters Of the disk title.The title Is NULL
'  terminated If it 's shorter than 12 chars.
'Byte 4 Is (BCD)the "write cycle".In theory every Write should update
'  that, but really...who cares?
'Byte 5 Is "number of files" * 8
'Byte 6: bits 4 And 5 encode the "*OPT 4" value
'        bits 0 And 1 are the high bits For "number of sectors"
'Byte 7 Is The low 8 bits Of "number of sectors"

'Now we have the remaining 31 records, which Match file equivalent
'files In sector 0. They are laid out Like this:
'  LL LL EE EE SS SS XX YY
'where "LLLL" Is The load address, "EEEE" Is The Exec address, "SSSS" Is
'the size, And "YY" Is The start sector."XX" Is The fun one.
'  bits 0 + 1 are high bits Of sector start
'  bits 2 + 3 are high bits Of load address
'  bits 4 + 5 are high bits Of size
'  bits 6 + 7 are high bits Of Exec address

'That makes 10 bits For start sector And 18 bits For size.

Public hPanel As New Panel[511]
Public BootData As New Byte[16]
Public IndexData As New Byte[511, 16]

Public CopySSD As Integer 'SSD selected for copy
Public HasMMBChanged As Boolean

Public Sub FileOpen_Click()
  
  Dim FStream As Stream
  Dim count As Integer
  Dim count1 As Integer
  
  If HasMMBChanged = True Then
    If Message.Warning("Current MMB as not been saved. Do you want to discard changes ?", "OK", "Cancel") = 2 Then Return
  End If
  
  Dialog.Title = "Choose a file"
  Dialog.Filter = ["*.MMB", "BBC File Archive"]
  Dialog.Path = "."
  If Dialog.OpenFile() Then
    Return ' User pressed Cancel -
  Endif
  If UCase(Right$(Dialog.Path, 3)) <> "MMB" Then
    Return 'Wrong file extension
  Endif
  Global.CurrentFile = Dialog.Path
  FStream = Open Global.CurrentFile For Input
  'TODO Need to verify valid file format
  
  'TODO Close any open child windows
  
  'Read boot data
  For count = 0 To 15
    bootdata[count] = Read #FStream As Byte
  Next
  
  DisplayBootDisks()
  
  'Read Disk index
  For count = 0 To 510
    For count1 = 0 To 15
      IndexData[count, count1] = Read #FStream As Byte
    Next
    
    DisplayIndex(count)
  Next
  
  Close #FStream
  Kill Global.TMPFile
  Copy Global.CurrentFile To Global.TMPFile
  
End

Public Sub Form_Open()
  
  Dim hTextBox As TextBox
  Dim hPictureBox As PictureBox
  Dim hLabel As Label
  Dim count As Integer
  Dim count1 As Integer
  Dim BoxCount As Integer
  Dim EndCount As Integer
  
  EndCount = 63
  
  For count = 0 To 7
    TabStrip1.Index = count
    TabStrip1.Text = Str$(count * 64) & "-" & Str$((count + 1) * 64 - 1)
    TabStrip1.Arrangement = 4
    If count = 7 Then 
      EndCount = 62 'Only 511 disks, not 512
      TabStrip1.Text = "448-510"
    Endif
    
    For count1 = 0 To EndCount
      BoxCount = (count * 64) + count1
      IndexData[Boxcount, 15] = 240 'Disk flag Unformatted
      
      hPanel[BoxCount] = New Panel(TabStrip1) As "Panel"
      With hPanel[BoxCount]
        .Width = 165
        .height = 20
        .Arrangement = 4
        .tag = Str$(BoxCount)
      End With   
      
      hLabel = New Label(hPanel[BoxCount]) As "ILabel"
      With hLabel
        .Width = 23
        .height = 20
        .text = Str$(BoxCount)
      End With
      
      hPictureBox = New PictureBox(hPanel[BoxCount]) As "Lock"
      With hPictureBox
        .Width = 16
        .Picture = Picture["icon:/16/floppy"]
        .height = 16
        .Alignment = 3
        
      End With
      
      hTextBox = New TextBox(hPanel[BoxCount]) As "TextB"
      With hTextBox
        .Width = 120
        .height = 20
        .Enabled = False
        .MaxLength = 12
        .PopupMenu = "MenuSSD"
        .ReadOnly = True
      End With
      
    Next
  Next
  
  TabStrip1.Index = 0
  FileNew_Click()
  FMain.hPanel[Global.CurrentSSD].Background = &H9AD297
  
End

Public Sub DisplayIndex(Index As Integer)
  
  Dim htb As TextBox
  Dim hpb As PictureBox
  
  htb = FMain.hPanel[Index].Children[2] ' Cast child to textbox (bug work around) i.e Children[2].Text is not seen as a valid property
  hpb = FMain.HPanel[Index].Children[1] ' Cast child to picturebox (bug work around) i.e Children[1].Picture is not seen as a valid property
  Object.Lock(htb) 'Stop the textbox from raising a changed event
  htb.text = Trim$(IndexToString(Index))
  Object.Unlock(htb)
  Select Case IndexData[Index, 15] 'Disk flags 
    Case 0 'Read Only
      htb.Enabled = True
      htb.ReadOnly = True
      hpb.Picture = Picture["icon:/16/lock"]
    Case 15 'Read/Write
      htb.Enabled = True
      htb.ReadOnly = False
      hpb.Picture = Picture["icon:/16/unlock"]
    Case 240 'Unformatted
      htb.Enabled = False
      hpb.Picture = Picture["icon:/16/floppy"]
    Case 255 'Invalid Disk
      htb.Enabled = False
      hpb.Picture = Picture["icon:/16/warning"]
  End Select
  
End

Public Sub DisplayBootDisks()
  
  FMain.SpinBox1.Value = bootdata[4] * 256 + bootdata[0]
  FMain.SpinBox2.Value = bootdata[5] * 256 + bootdata[1]
  FMain.SpinBox3.Value = bootdata[6] * 256 + bootdata[2]
  FMain.SpinBox4.Value = bootdata[7] * 256 + bootdata[3]
  
End

Public Function IndexToString(Index As Integer) As String
  
  Dim count As Integer
  Dim OutputString As String
  
  For count = 0 To 11 'First 12 bytes are Index (disc) name
    OutputString = OutputString & Chr$(IndexData[Index, count])
  Next
  Return OutputString
  
End  

Public Sub TextB_MouseDown()
  
  Panel_MouseDown()
  
End

Public Sub Lock_MouseDown()
  
  If IndexData[Last.Parent.Tag, 15] = 0 Then
    IndexData[Last.Parent.Tag, 15] = 15
    HasMMBChanged = True
  Else If IndexData[Last.Parent.Tag, 15] = 15 Then
    IndexData[Last.Parent.Tag, 15] = 0
    HasMMBChanged = True
  Endif
  DisplayIndex(Last.Parent.Tag)
  
  Panel_MouseDown()
  
End

Public Sub Panel_MouseDown()
  
  FMain.hPanel[Global.CurrentSSD].Background = FMain.TabStrip1.Background
  Try Global.CurrentSSD = Val(Last.Parent.Tag) 'Sub was called via different event 
  If Error Then Global.CurrentSSD = Val(Last.Tag) 'Sub was called by this event
  FMain.hPanel[Global.CurrentSSD].Background = &H9AD297  'Greenish
  If IndexData[Global.CurrentSSD, 15] > 15 Then 'If disk is unused, disable copy/delete/export/edit
    MenuEdit.Children[0].Enabled = False 'copy
    MenuEdit.Children[2].Enabled = False 'delete
    MenuSSD.Children[1].Enabled = False 'export
    MenuSSD.Children[2].Enabled = False 'edit
  Else
    MenuEdit.Children[0].Enabled = True
    MenuEdit.Children[2].Enabled = True
    MenuSSD.Children[1].Enabled = True
    MenuSSD.Children[2].Enabled = True
  Endif
  
End

Public Sub ILabel_MouseDown()
  
  Panel_MouseDown()
  
End

Public Sub SSDImport_Click()
  
  Dim FSSDStream As Stream
  Dim FMMBStream As Stream
  Dim FSSDLength As Integer
  Dim SSDPosition As Integer
  Dim count As Integer
  Dim DiskTitle As New Byte[12]
  
  Dialog.Title = "Choose a file"
  Dialog.Filter = ["*.ssd", "BBC Single Sided Disk"]
  Dialog.Path = "."
  If Dialog.OpenFile() Then
    Return ' User pressed Cancel -
  Endif
  If UCase(Right$(Dialog.Path, 3)) <> "SSD" Then
    Return 'Wrong file extension
  Endif
  
  FSSDStream = Open Dialog.Path For Read
  'TODO Need to verify valid file format
  For count = 0 To 7 'Read First 8 bytes of disk title
    DiskTitle[count] = Read #FSSDStream As Byte
  Next
  Seek #FSSDStream, &H100
  For count = 8 To 11 'Read Last 4 bytes of disk title
    DiskTitle[count] = Read #FSSDStream As Byte
  Next
  
  Close #FSSDStream
  If Message.Question("Are you sure you want to import to Disk " & Str$(Global.CurrentSSD) & "?", "OK", "Cancel") = 2 Then Return
  
  For count = 0 To 11 ' Copy disk title to current index
    If DiskTitle[count] < 32 Then
      DiskTitle[count] = 0
    Endif
    IndexData[Global.CurrentSSD, count] = DiskTitle[count]
  Next
  IndexData[Global.CurrentSSD, 15] = 0 'Set to Read Only
  DisplayIndex(Global.CurrentSSD)
  'Write Boot & Index 
  WriteIndexToTMP()
  'Copy SSD file to temp MMB file
  FSSDStream = Open Dialog.path For Read
  FMMBStream = Open Global.TMPFile For Write
  FSSDLength = Lof(FSSDStream)
  SSDPosition = (Global.CurrentSSD * Global.SSDSize) + Global.SSDOffset
  
  'Write SSD
  Seek #FMMBStream, SSDPosition
  For count = 0 To FSSDLength - 1
    Write #FMMBStream, Read #FSSDStream As Byte As Byte   
  Next
  Close #FMMBStream
  Close #FSSDStream
  HasMMBChanged = True
  
End

Public Sub FileSave_Click()
  
  If Message.Question("Are you sure you want to save?", "OK", "Cancel") = 2 Then Return
  If Global.CurrentFile = "" Then
    FileSaveAs_Click()
    Return
  End If
  If Global.CurrentFile = "" Then Return
  WriteIndexToTMP()
  Print Global.CurrentFile
  Try Kill Global.CurrentFile
  If Error Then
    Message.Error(Error.text)
    Return
  Endif
  Copy Global.TMPFile To Global.CurrentFile
  HasMMBChanged = False
  
End

Public Sub CreateTMPFile()
  
  Dim hFile As Stream
  
  Global.TMPFile = Temp$()
  hFile = Open Global.TMPFile For Create
  Seek #hFile, Lof(hFile) + 8191
  Write #hFile, 0 As Byte
  Close #hFile
  
End

Public Sub FileSaveAs_Click()
  
  Dialog.Filter = ["*.MMB", "BBC File Archive"]
  Dialog.Path = "."
  If Dialog.SaveFile() Then
    Return ' User pressed Cancel -
  Endif
  Global.CurrentFile = Dialog.path
  WriteIndexToTMP()
  Try Kill Global.CurrentFile
  Try Copy Global.TMPFile To Global.CurrentFile
  If Error Then
    Message.Error(Error.text)
    Return
  Endif
  HasMMBChanged = False
  
End

Public Sub WriteIndexToTMP()
  
  Dim FMMBStream As Stream
  Dim count As Integer
  Dim count1 As Integer
  
  FMMBStream = Open Global.TMPFile For Write
  'Write BootData
  For count = 0 To 15
    Write #FMMBStream, BootData[count] As Byte
  Next
  'Write Index
  For count = 0 To 510
    For count1 = 0 To 15
      Write #FMMBStream, IndexData[count, count1] As Byte
    Next
  Next
  Close #FMMBStream
  
End

Public Sub SpinBox1_Change()
  
  BootData[0] = SpinBox1.value % 256
  BootData[4] = Int(SpinBox1.value / 256)
  
End

Public Sub SpinBox2_Change()
  
  BootData[1] = SpinBox2.value % 256
  BootData[5] = Int(SpinBox2.value / 256)
  
End

Public Sub SpinBox3_Change()
  
  BootData[2] = SpinBox3.value % 256
  BootData[6] = Int(SpinBox3.value / 256)
  
End

Public Sub SpinBox4_Change()
  
  BootData[3] = SpinBox4.value % 256
  BootData[7] = Int(SpinBox4.value / 256)
  
End

Public Sub EditDelete_Click()
  
  Dim count As Integer
  
  If FMain.hPanel[Global.CurrentSSD].Children[2].Enabled = False Then Return ' Nothing to delete
  If Message.Question("Are you sure you want to delete Disk: " & Str$(Global.CurrentSSD) & "?", "OK", "Cancel") = 2 Then Return
  For count = 0 To 14
    IndexData[Global.CurrentSSD, count] = 0
  Next
  IndexData[Global.CurrentSSD, 15] = 240 'Set to unformatted
  DisplayIndex(Global.CurrentSSD)
  
End

Public Sub EditCopy_Click()
  
  CopySSD = Global.CurrentSSD
  MenuEdit.Children[1].Enabled = True
  
End

Public Sub EditPaste_Click()
  
  Dim count As Integer
  Dim hFileFrom As Stream
  Dim hFileTo As Stream
  
  If copySSD = Global.CurrentSSD Then Return
  If Message.Question("Are you sure you want to copy Disk: " & Str$(copySSD) & " to Disk: " & Str$(Global.CurrentSSD) & " ?", "OK", "Cancel") = 2 Then Return 
  hFileFrom = Open Global.TMPFile For Read
  hFileTo = Open Global.TMPFile For Write
  Seek #hFilefrom, (copySSD * Global.SSDSize) + Global.SSDOffset
  Seek #hFileTo, (Global.CurrentSSD * Global.SSDSize) + Global.SSDOffset
  For count = 1 To Global.SSDSize
    Write #hFileTo, Read #hFileFrom As Byte As Byte
  Next
  Close #hFileFrom
  Close #hFileTo
  For count = 0 To 15
    IndexData[Global.CurrentSSD, count] = IndexData[CopySSD, count]
  Next
  DisplayIndex(Global.CurrentSSD)
  MenuEdit.Children[1].Enabled = False
  HasMMBChanged = True
  
End

Public Sub FileNew_Click()
  
  Dim count As Integer
  Dim count1 As Integer
  
  If HasMMBChanged = True Then
    If Message.Warning("Current MMB as not been saved. Do you want to discard changes ?", "OK", "Cancel") = 2 Then Return
  End If
  For count = 0 To 14 'Reset bootdata
    BootData[count] = 0
  Next
  BootData[0] = 0
  BootData[1] = 1
  BootData[2] = 2
  BootData[3] = 3
  
  For count = 0 To 510 'Reset IndexData
    For count1 = 0 To 14
      IndexData[count, count1] = 0
    Next
    IndexData[count, 15] = 240 'Unformatted
  Next
  
  CreateTMPFile()
  WriteIndexToTMP()
  For count = 0 To 510
    DisplayIndex(count)
  Next
  DisplayBootDisks()
  HasMMBChanged = False
  
End

Public Sub Form_Close()
  
  If HasMMBChanged = True Then
    If Message.Warning("Current MMB as not been saved. Do you want to discard changes ?", "OK", "Cancel") = 2 Then
      Stop Event
      Return
    End If
  End If
  Quit
  
End

Public Sub TextB_Change()
  'Edit SSD Title
  
  Dim count As Integer
  Dim NameLength As Integer
  Dim Index As Integer
  Dim Char As Byte
  Dim hFile As Stream
  
  NameLength = Last.Length
  Index = Last.Parent.tag
  'Update Index
  For count = 0 To NameLength 
    Char = Asc(Mid$(Last.text, count + 1, 1))
    IndexData[Index, count] = Char
  Next
  If NameLength < 12 Then IndexData[Index, count] = 0 'Null terminated if less than 12 chrs
  'Update SSD Image
  hFile = Open Global.TMPFile For Write 
  Seek #hFile, (Index * Global.SSDSize) + Global.SSDOffset
  For count = 0 To 7 'Write first 8 bits of title
    Write #hFile, IndexData[Index, count] As Byte
  Next
  Seek #hFile, (Index * Global.SSDSize) + Global.SSDOffset + 256 'Offset to last 4 bits of title
  For count = 8 To 11 'Write last 4 bits of title
    Write #hFile, IndexData[Index, count] As Byte
  Next
  Close #hFile
  
End

Public Sub SSDFormat_Click()
  
  Dim count As Integer
  Dim hFile As Stream
  
  If Message.Warning("Are you sure you want to format Disk: " & Str$(Global.CurrentSSD) & "? - All data will be lost.", "OK", "Cancel") = 2 Then
    Return
  End If
  hFile = Open Global.TMPFile For Write 
  Seek #hFile, (Global.CurrentSSD * Global.SSDSize) + Global.SSDOffset
  'Zero disk
  For count = 1 To Global.SSDSize
    Write #hFile, 0 As Byte 
  Next
  'Write OPT & sectors
  Seek #hFile, (Global.CurrentSSD * Global.SSDSize) + Global.SSDOffset + 262 'Offset to OPT/Sectors byte
  Write #hFile, &H03 As Byte
  Write #hFile, &H20 As Byte
  Close #hFile
  For count = 0 To 14
    IndexData[Global.CurrentSSD, count] = 0
  Next
  IndexData[Global.CurrentSSD, 15] = 15 'Read/Write
  DisplayIndex(Global.CurrentSSD)
  
End

Public Sub SSDExport_Click()
  
  Dim count As Integer
  Dim hFileFrom As Stream
  Dim hFileTo As Stream
  Dim htb As TextBox
  
  htb = FMain.hPanel[Global.CurrentSSD].Children[2] ' Cast child to textbox (bug work around) i.e Children[2].Text is not seen as a valid property
  Dialog.Filter = ["*.ssd", "BBC Single Sided Disk"]
  Dialog.Path = "." & "/" & htb.Text & ".ssd"
  If Dialog.SaveFile() Then
    Return ' User pressed Cancel -
  Endif
  If Dialog.Path = "" Then Return
  Try hFileTo = Open Dialog.Path For Create
  If Error Then
    Message.Error(Error.text)
    Return
  Endif
  hFileFrom = Open Global.TMPFile For Read
  Seek #hFilefrom, (Global.CurrentSSD * Global.SSDSize) + Global.SSDOffset
  For count = 1 To Global.SSDSize
    Write #hFileTo, Read #hFileFrom As Byte As Byte
  Next
  Close #hFileFrom
  Close #hFileTo
  
End

Public Sub MenuAbout_Click()
  
  Message.Info("<center>MMB Disk Manager<br>(c)2017 Jason Lucas<br>spookyconnection@virginmedia.com</center>")
  
End

Public Sub SSDEdit_Click()
  
  Dim hForm As Form
  
  hForm = New Fssd
  hForm.Show()
  
End
